<!DOCTYPE html>
<html lang="tr">
<head>
    <%- include('../partials/head') %>
    <title>Site Yönetimi | Uni-Dash</title>
    <link href="https://cdn.jsdelivr.net/npm/sortablejs@1.14.0/Sortable.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.14.0/Sortable.min.js"></script>
    <style>
        .site-card {
            cursor: move;
        }
        .site-card.sortable-ghost {
            opacity: 0.5;
            background: #f8f9fa;
        }
        .site-icon {
            width: 32px;
            height: 32px;
            object-fit: contain;
        }
    </style>
    <link rel="icon" type="image/svg+xml" href="/images/logo.svg">
</head>
<body>
    <%- include('../partials/nav') %>

    <div class="container mt-4">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h2>Site Yönetimi</h2>
            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addSiteModal">
                <i class="fas fa-plus"></i> Yeni Site
            </button>
        </div>

        <div class="row">
            <div class="col-12">
                <div class="alert alert-info">
                    <i class="fas fa-info-circle"></i> Siteleri sürükleyerek sıralayabilirsiniz.
                </div>
                <div id="siteList">
                    <% sites.forEach(function(site) { %>
                        <div class="card mb-3 site-card" data-id="<%= site._id %>">
                            <div class="card-body d-flex align-items-center">
                                <img src="http://localhost:3000<%= site.logo %>" alt="<%= site.name %>" class="site-icon me-3">
                                <div class="flex-grow-1">
                                    <h5 class="card-title mb-1"><%= site.name %></h5>
                                    <p class="card-text mb-0">
                                        <small class="text-muted"><%= site.link %></small>
                                    </p>
                                </div>
                                <div class="d-flex align-items-center">
                                    <div class="form-check form-switch me-3">
                                        <input class="form-check-input" type="checkbox" 
                                               onchange="toggleSite('<%= site._id %>', this.checked)"
                                               <%= site.isActive ? 'checked' : '' %>>
                                    </div>
                                    <button type="button" class="btn btn-sm btn-outline-primary me-2" 
                                            onclick="editSite('<%= site._id %>', '<%= site.name %>', '<%= site.link %>', '<%= site.logo %>', <%= site.isActive %>)">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <button type="button" class="btn btn-sm btn-outline-danger" 
                                            onclick="deleteSite('<%= site._id %>')">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    <% }); %>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Site Modal -->
    <div class="modal fade" id="addSiteModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Yeni Site</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="addSiteForm">
                        <div class="mb-3">
                            <label for="name" class="form-label">Site Adı</label>
                            <input type="text" class="form-control" id="name" name="name" required>
                        </div>
                        <div class="mb-3">
                            <label for="url" class="form-label">URL</label>
                            <input type="url" class="form-control" id="url" name="url" required>
                        </div>
                        <div class="mb-3">
                            <label for="icon" class="form-label">Site İkonu</label>
                            <input type="file" class="form-control" id="icon" name="icon" accept="image/*" required>
                            <small class="text-muted">32x32 boyutunda PNG/SVG önerilir</small>
                        </div>
                        <div class="mb-3">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="isActive" name="isActive" checked>
                                <label class="form-check-label" for="isActive">
                                    Aktif
                                </label>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">İptal</button>
                    <button type="button" class="btn btn-primary" onclick="addSite()">Kaydet</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit Site Modal -->
    <div class="modal fade" id="editSiteModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Site Düzenle</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="editSiteForm">
                        <input type="hidden" id="editId">
                        <div class="mb-3">
                            <label for="editName" class="form-label">Site Adı</label>
                            <input type="text" class="form-control" id="editName" name="name" required>
                        </div>
                        <div class="mb-3">
                            <label for="editUrl" class="form-label">URL</label>
                            <input type="url" class="form-control" id="editUrl" name="url" required>
                        </div>
                        <div class="mb-3">
                            <label for="editIcon" class="form-label">Site İkonu</label>
                            <input type="file" class="form-control" id="editIcon" name="logo" accept="image/*">
                            <small class="text-muted">32x32 boyutunda PNG/SVG önerilir. Boş bırakırsanız mevcut logo kullanılmaya devam edecektir.</small>
                        </div>
                        <div class="mb-3">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="editIsActive" name="isActive">
                                <label class="form-check-label" for="editIsActive">
                                    Aktif
                                </label>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">İptal</button>
                    <button type="button" class="btn btn-primary" onclick="updateSite()">Güncelle</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Initialize Sortable
        const siteList = document.getElementById('siteList');
        new Sortable(siteList, {
            animation: 150,
            ghostClass: 'sortable-ghost',
            onEnd: function() {
                const siteIds = Array.from(siteList.children).map(el => el.dataset.id);
                updateSiteOrder(siteIds);
            }
        });

        // Update site order
        async function updateSiteOrder(siteIds) {
            try {
                const response = await apiRequest('/api/sites/reorder', {
                    method: 'PUT',
                    body: JSON.stringify({ siteIds })
                });

                if (!response || !response.ok) {
                    alert('Site sıralaması güncellenirken bir hata oluştu');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Site sıralaması güncellenirken bir hata oluştu');
            }
        }

        // Toggle site active status
        async function toggleSite(id, isActive) {
            try {
                const response = await apiRequest(`/api/sites/${id}`, {
                    method: 'PUT',
                    body: JSON.stringify({ 
                        isActive: isActive,
                        name: document.querySelector(`[data-id="${id}"] .card-title`).textContent,
                        link: document.querySelector(`[data-id="${id}"] .text-muted`).textContent
                    })
                });

                if (!response || !response.ok) {
                    alert('Site durumu güncellenirken bir hata oluştu');
                    location.reload();
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Site durumu güncellenirken bir hata oluştu');
                location.reload();
            }
        }

        // Add new site
        async function addSite() {
            const name = document.getElementById('name').value;
            const link = document.getElementById('url').value;
            const logoFile = document.getElementById('icon').files[0];
            const isActive = document.getElementById('isActive').checked;

            if (!name || !link || !logoFile) {
                alert('Lütfen tüm alanları doldurun');
                return;
            }

            const formData = new FormData();
            formData.append('name', name);
            formData.append('link', link);
            formData.append('logo', logoFile);
            formData.append('isActive', isActive);

            try {
                const response = await apiRequest('/api/sites', {
                    method: 'POST',
                    body: formData
                });

                if (response.ok) {
                    location.reload();
                } else {
                    const data = await response.json();
                    if (data.errors) {
                        const errorMessages = data.errors.map(err => err.msg).join('\n');
                        alert('Hata:\n' + errorMessages);
                    } else {
                        alert('Site eklenirken bir hata oluştu: ' + (data.message || 'Bilinmeyen hata'));
                    }
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Site eklenirken bir hata oluştu');
            }
        }

        // Edit site
        function editSite(id, name, link, logo, isActive) {
            document.getElementById('editId').value = id;
            document.getElementById('editName').value = name;
            document.getElementById('editUrl').value = link;
            document.getElementById('editIsActive').checked = isActive;
            
            new bootstrap.Modal(document.getElementById('editSiteModal')).show();
        }

        // Update site
        async function updateSite() {
            const id = document.getElementById('editId').value;
            const name = document.getElementById('editName').value;
            const link = document.getElementById('editUrl').value;
            const logoFile = document.getElementById('editIcon').files[0];
            const isActive = document.getElementById('editIsActive').checked;

            const formData = new FormData();
            formData.append('name', name);
            formData.append('link', link);
            if (logoFile) {
                formData.append('logo', logoFile);
            }
            formData.append('isActive', isActive);

            try {
                const response = await apiRequest(`/api/sites/${id}`, {
                    method: 'PUT',
                    body: formData
                });

                if (response && response.ok) {
                    location.reload();
                } else {
                    alert('Site güncellenirken bir hata oluştu');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Site güncellenirken bir hata oluştu');
            }
        }

        // Delete site
        async function deleteSite(id) {
            if (confirm('Bu siteyi silmek istediğinizden emin misiniz?')) {
                try {
                    const response = await apiRequest(`/api/sites/${id}`, {
                        method: 'DELETE'
                    });

                    if (response && response.ok) {
                        location.reload();
                    } else {
                        alert('Site silinirken bir hata oluştu');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert('Site silinirken bir hata oluştu');
                }
            }
        }
    </script>
</body>
</html> 